#!/bin/sh
#descripcion: Crea un jail
#  __ _        _                            
# / _| |_   _ (_) ___  ___   ___  _ __ __ _ 
#| |_| | | | || |/ _ \/ __| / _ \| '__/ _` |
#|  _| | |_| || | (_) \__ \| (_) | | | (_| |
#|_| |_|\__,_|/ |\___/|___(_)___/|_|  \__, |
#           |__/                      |___/

# this uses openssh chroot available in debian
# something like the following in sshd_config
#Match group sshuser
#   ChrootDirectory /home/%u
#   X11Forwarding no
#   AllowTcpForwarding n

#revisando si no existe ningun argumento.
[ ${#} -ne 1 ] && { echo "Usar ./${0} user"; exit 1; }

USER="${1}"
DEST="/home/${1}"

# test if username supplied
if [ -z ${1} ] 
then
    echo "please supply username"
    exit 1
fi

#test if user exists
grep -Eq "^${USER}:" /etc/passwd
if [ ${?} -eq 0 ]; then
    echo "${USER} exists!"
    exit 1
fi

#Revisando que tenga los permisos adecuados
if [ `id -g` -ne 0 ]
then
  echo "Usage:  ./${0} root group"
  exit 1
fi

################################################################################
# Descripcion: copia los libreria enlazados desde el binario                   #
# link: http://www.cyberciti.biz/files/lighttpd/l2chroot.txt                   #
################################################################################
l2chroot()
{
	#aqui debemos ucupar los 2 argumentos que recibimos ${1} y ${2}
	BASE="${2}"
	DST="{1}"
	[ ! -d ${BASE} ] && mkdir -p ${BASE} || : 
	
	# iggy ld-linux* file as it is not shared one
	echo "Copying shared files/libs to $BASE..."
	for i in `ldd ${DST} | awk '{print $3}' | grep -E "^/"`
	do
	  d=`dirname $i`
	  [ ! -d ${BASE}${d} ] && mkdir -p ${BASE}${d} || :
	  cp ${i} ${BASE}${d}
	done

	# copy /lib/ld-linux* or /lib64/ld-linux* to $BASE/$sldlsubdir
	# get ld-linux full file location 
	sldl=`ldd ${DST} | grep 'ld-linux' | awk '{ print $1}'`
	# now get sub-dir
	sldlsubdir=`dirname $sldl`

	if [ ! -f ${BASE}${sldl} ];
	then
	  echo "Copying ${sldl} ${BASE}${sldlsubdir}..."
	  cp ${sldl} ${BASE}${sldlsubdir}
	else
	  :
	fi
}

echo "build chroot enviornment"
mkdir -p ${DEST}

DIRS="tmp dev etc lib usr bin lib64 lib32"
for dir in ${DIRS}
do
    mkdir -p ${DEST}/${dir}
done

mkdir -p ${DEST}/usr/bin
chown root.root ${DEST}

#create necesary devs
mknod -m 666 ${DEST}/dev/null c 1 3
mknod -m 644 ${DEST}/dev/random c 1 8
mknod -m 644 ${DEST}/dev/urandom c 1 9 
dd if=/dev/random of=${DEST}/dev/random count=1 bs=512
dd if=/dev/urandom of=${DEST}/dev/urandom count=1 bs=512
mknod -m 666 ${DEST}/dev/tty c 5 0
#lower permissions on /dev
chmod 111 /dev

#copiar ficheros de configuracion
copyFilesConfig()
{
	FILES="ld.so.cache ld.so.conf localtime nsswitch.conf hosts hostname resolv.conf localtime"
	for f in ${FILES}
	do
		cp /etc/${f} ${1}/etc/ 
	done
	cp -r /etc/ssl ${1}/etc/
	mkdir ${1}/etc/ssh
	cp /etc/ssh/ssh_config ${1}/etc/ssh/
}
copyFilesConfig ${DEST}

#turn off login motd
touch ${DEST}${DEST}/.hushlogin
chmod 640 ${DEST}${DEST}/.hushlogin

#link to auth keys
mkdir -p ${DEST}/.ssh
ln -s ${DEST}${DEST}/.ssh/authorized_keys ${DEST}/.ssh/authorized_keys
chmod 111 ${DEST}/.ssh

# certificates
mkdir -p ${DEST}/usr/share/ca-certificates
cp -r /usr/share/ca-certificates/* ${DEST}/usr/share/ca-certificates/
#php
mkdir -p ${DEST}/usr/share/php
cp -r /usr/share/php/* ${DEST}/usr/share/php/
mkdir -p ${DEST}/usr/share/pear
cp -r /usr/share/pear/* ${DEST}/usr/share/pear/
mkdir -p ${DEST}/usr/lib/php5
cp -r /usr/lib/php5/* ${DEST}/usr/lib/php5/
cp -r /etc/php5 ${DEST}/etc/
mkdir ${DEST}/etc/pear
cp /etc/pear/pear.conf ${DEST}/etc/
cp /usr/bin/pear ${DEST}/usr/bin/
cp /usr/bin/pecl ${DEST}/usr/bin/
# ssl
mkdir -p ${DEST}/usr/lib/ssl
cp -r /usr/lib/ssl/* ${DEST}/usr/lib/ssl/

#and missing lib
cp /lib/libnss_dns.so.2 ${DEST}/lib/ 
cp /lib/libnss_compat.so.2 ${DEST}/lib/ 
cp /lib/libnsl.so.1 ${DEST}/lib/
cp /lib/libnss_nis.so.2 ${DEST}/lib/
cp /lib/libnss_files.so.2 ${DEST}/lib/

#copy binarys
BINS="openssl php mysql mysqldump mysqlrepair vi tar gzip rm ls mkdir cp less bash rsync ssh scp wget date cat mv grep nano chmod gpg passwd nano-tiny find dash editor crontab env dirname uname tput which mail sendmail"

addbin ()
{
    ORIG=`which ${1}`
    cp ${ORIG} ${DEST}${ORIG}
    l2chroot ${ORIG} ${DEST}
}

for bin in ${BINS} 
do
    addbin ${bin}
done

#links to nano and pico
cd ${DEST}/bin
ln -s nano-tiny nano 
ln -s nano-tiny pico
ln -s dash sh
cd

# make home, create user
echo "create user ${USER} and directories"
mkdir -p ${DEST}/home
password=`makepasswd`
PASS=`perl -e 'print crypt($ARGV[0], "pass")' $password`
useradd --create-home -s /bin/bash  \
    -d ${DEST}/home/${1} --password ${PASS} \
    ${USER}
[ ${?} -eq 0 ] && echo "User has been added to system!" || echo "Failed to add a user!"
adduser ${USER} sshuser
adduser ${USER} www-data 

#add rand num seed
openssl rand -out ${DEST}/home/${USER}/.rnd -rand /dev/urandom 1024
chmod 600 ${DEST}/home/${USER}/.rnd
chown ${USER}:${USER} ${DEST}/home/${USER}/.rnd 

#clean un /etc/passwd
setChrootConfig()
{
	USER=${1}
	DEST=/home/${1}
	sed -i "s/\/home\/${USER}\/home\/${USER}/\/home\/${USER}/" /etc/passwd
	grep -E "^www-data" /etc/passwd > ${DEST}/etc/passwd
	grep -E "^www-data" /etc/shadow > ${DEST}/etc/shadow
	grep -E "^www-data" /etc/group > ${DEST}/etc/group
	grep -E "^crontab" /etc/group >> ${DEST}/etc/group
	grep -E "^sendmail" /etc/group >> ${DEST}/etc/group
	grep -E "^sendmail" /etc/passwd >> ${DEST}/etc/passwd
	grep -E "^${USER}" /etc/passwd >> ${DEST}/etc/passwd
	grep -E "^${USER}" /etc/shadow >> ${DEST}/etc/shadow
	grep -E "^${USER}" /etc/group >> ${DEST}/etc/group
	chmod 600 ${DEST}/etc/shadow
	echo "\nexport EDITOR=nano" >> ${DEST}/home/${USER}/.profile
}
setChrootConfig ${USER}

#set up mail
setUpMail()
{
	chown sendmail.nogroup ${1}/usr/bin/sendmail
	cp -r /etc/ssmtp ${1}/etc/
	chown root.sendmail ${1}/etc/ssmtp/*
	cp /usr/lib/sendmail usr/lib/sendmail
	l2chroot /usr/lib/sendmail ${1}
}
setUpMail ${DEST}

#set up cron
mkdir -p ${DEST}/var/spool/cron/crontabs
chmod o-rx ${DEST}var/spool/cron/crontabs
chmod o+t ${DEST}var/spool/cron/crontabs
echo "# ejemplo cron\n# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/"> \
	${DEST}var/spool/cron/crontabs/${USER}
chgrp ${USER} ${DEST}var/spool/cron/crontabs/${USER}
ln -s ${DEST}var/spool/cron/crontabs/${USER} /var/spool/cron/crontabs/${USER}

# motd doesnt do anything
#create user welcome message
#make_motd () {
#cat <<- _EOF_
#	Benvenido a radio.flujos.org
#_EOF_
#}
#make_motd > ${DEST}/etc/motd
#make_motd > ${DEST}/etc/motd.tail

#configure apache
make_vhost () {
cat <<- _EOF_
	<VirtualHost *:80>
	        ServerAdmin ${USER}@localhost
	        ServerName ${USER}.pezenelarbol.org
	        ServerAlias *.${USER}.pezenelarbol.org

	        DirectoryIndex index.html index.htm index.php
	        DocumentRoot /home/${USER}/home/${USER}/public_html/

	        ScriptAlias /cgi-bin/ /home/${USER}/home/${USER}/cgi-bin/
	        <Location /cgi-bin>
	                Options +ExecCGI
	        </Location>

	        <Directory /home/${USER}/home/${USER}/public_html>
	                Options Indexes FollowSymLinks MultiViews
	                AllowOverride All
	                Order allow,deny
	                Allow from all
	        </Directory>
		php_admin_value open_basedir ${DEST}/home/${USER}:/tmp
		php_admin_value upload_tmp_dir ${DEST}/tmp
		php_admin_value session.save_path ${DEST}/tmp
	        ErrorLog /home/${USER}/home/${USER}/logs/error.log
	        CustomLog /home/${USER}/home/${USER}/logs/access.log combined
	</VirtualHost>
_EOF_
}
echo "create /etc/apache2/sites-available/${USER}"
make_vhost > /etc/apache2/sites-available/${USER}
a2ensite ${USER}
/etc/init.d/apache2 reload

echo '<?php phpinfo(); ?>' > ${DEST}/home/${USER}/public_html/index.php
chown ${USER}:${USER} ${DEST}/home/${USER}/public_html/index.php

echo "Contrase√±a: ${password}"
